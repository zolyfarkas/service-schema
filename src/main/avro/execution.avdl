@namespace("org.spf4j.service.avro")
protocol Execution {

    import idl "core.avdl";

    /** a record to describe backoff parameters */
    @beta
    record RetryParams {

      /**
       * In case of a error is encountered, this is the number of immediate initial retries.
       * these retries are done without any delay, to leverage a existing selection algorithm.
       */
      int nrInitialImmediateRetries = 2;

      /** backoff start delay */
      long startDelayNanos = 1000000;

      /** backoff max delay */
      long maxDelayNanos = 2000000000;

      /** maximum number of retries */
      int maxNrRetries = 20;

      /** maximum amount to retry relative to timeout */
      double maxTimeToRetryFactor = 1.0;
    }

    /** Error specific retry rule */
    @beta
    record ErrorRetryRule {
      /** the error type */
      string errorType;
      /** the retry parameters, null for default retry parameters */
      union {null, RetryParams} retryParameters = null;
    }


    /** retry rule */
    @beta
    record RetryRule {
      /** the rule name */
      string name;
    }

    /** a record to describe a retry policy */
    @beta
    record RetryPolicy {

      /**
       * The retry algo fails, the resulting exception
       */
      int maxExceptionChainLength = 20;

      /** Default retry parameters */
      RetryParams defaultRetryParams = {};

      /** Error retry rules */
      array<union {RetryRule, ErrorRetryRule}> rules = [];

    }

    /** a record to describe a hedge policy */
    @beta
    record HedgePolicy {

      /** Minimum hedge delay nanos */
      long minHedgeDelayNanos;

      /** maximum hedge delay nanos */
      long maxHedgeDelayNanos;

      /** number of hedges */
      long nrHedges;

      /** hedging algo */
      string algo = "timeout-relative";
    }


    /** a record to describe a execution policy */
    @beta
    record ExecutionPolicy {
      /** maximum amount of time for execution */
      long overallTimeoutNanos;
      /** maximum amount of time per attempt */
      long attemptTimeoutNanos;
      /** The retry policy, null if no retries */
      union {null, RetryPolicy} retryPolicy = null;
      /** the hedging policy, null if no hedging */
      union {null, HedgePolicy} hedgePolicy = null;
    }


    /** a record to describe a HttP request policy */
    @beta
    record HttpExecutionPolicy {
      mixin ExecutionPolicy;
      /** connection timeout */
      long connectTimeoutNanos = 10000000;
      /** Connection pooling attributes/policies.*/
    }
   

}
